@using Card = RetroBoard.Shared.Models.Card
@using Colors = RetroBoard.Shared.Colors
@using Size = MudBlazor.Size

<div style="margin: 15px;
    min-width: 400px;
    max-width: 50vmax;
    min-height: 600px;
    box-shadow: 3px 3px 10px 3px black;
    border-radius: 5px">
    <div>
        <div style="float: right">
            <MudIconButton Icon="@Icons.Material.TwoTone.Close" Size="Size.Small" OnClick="RemoveColumnAsync"/>
        </div>
        <div style="" class="d-flex justify-center align-center">
            <div style="position: relative; text-align: center" class="mb-5 mt-5">
                @if (_isEditPressed)
                {
                    <MudInput @bind-Value="@_columnName" Variant="Variant.Filled" Style="width: 200px; text-align: center"/>
                    <div style="display:flex; flex-direction: row; justify-content: end; align-items: center; margin-bottom: 3px">
                        <MudIconButton
                            Ripple="false"
                            Size="Size.Small"
                            Icon="@Icons.Material.Filled.Close"
                            Style=@($"color: {Colors.Black}")
                            OnClick="Discard"/>
                        <MudIconButton
                            Ripple="false"
                            Size="Size.Small"
                            Icon="@Icons.Material.Filled.Check"
                            Style=@($"color: {Colors.Black}")
                            OnClick="SaveAsync"/>
                    </div>
                }
                else
                {
                    <div @onmouseenter="@(() => _isEditButtonVisible = true)" @onmouseleave="@(() => _isEditButtonVisible = false)">
                        <MudText Style="width: 200px; text-align: center">@_columnName</MudText>
                        <div class="w-100" style="position: absolute; margin-top: -25px">
                            <div class="d-flex justify-content-end">
                                <MudIconButton
                                    Ripple="false"
                                    hidden="@(!_isEditButtonVisible)"
                                    Icon="@Icons.Material.Filled.Edit"
                                    Size="Size.Small"
                                    @onclick="() => _isEditPressed = true"
                                    Style=@($"margin: 5px 5px; color: {Colors.Black}")/>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div>
        @if (!_isCardCreatePressed)
        {
        <div class="d-flex align-center justify-center p-2">
            <MudButton Variant="Variant.Filled" Style="border-radius: 15px" OnClick="@(() => _isCardCreatePressed = true)" Color="Color.Secondary" >Add card</MudButton>
        </div>
        }
        else
        {
            <div>
                <MudTextField T="string" @bind-Value="_cardTitle" Variant="Variant.Filled" Label="Title" Class="pr-3 pl-3 pb-1"/>
                <MudTextField Class="d-flex pr-3 pl-3" T="string" AutoGrow="true" @bind-Value="_cardContent" Variant="Variant.Filled" Label="Content" />
                
                <div class="d-flex align-center justify-content-end ma-2">
                    <MudIconButton
                        Size="Size.Small"
                        Icon="@Icons.Material.Filled.Close"
                        OnClick="@(() => _isCardCreatePressed = false)"
                        Style=@($"color: {Colors.Black}")/>
                    <div style="width: 5px"></div>
                    <MudIconButton 
                        Size="Size.Small"
                        Icon="@Icons.Material.Filled.Check"
                        OnClick="CreateCard"
                        Style=@($"color: {Colors.Black}")/>
                </div>
            </div>
        }
    </div>
    <div class="h-100">
        <MudList T="Card" Class="h-100"  ReadOnly="false" Style="">
            <MudDropZone T="Card" Identifier="@Column.Name" AllowReorder="true" Class="h-100">
                <ItemRenderer>
                    <CardComponent Card="@context" RemoveCardAsync="RemoveCardAsync"/>
                </ItemRenderer>
            </MudDropZone>
        </MudList>
    </div>
</div>