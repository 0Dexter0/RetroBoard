@using Colors = RetroBoard.Shared.Colors
@using Size = MudBlazor.Size

<MudCard Class="border-1 rounded-1 m-1" Style=@($"background-color: {PaletteProvider.Theme.SecondaryLighten}")>
    @if (!_isEditPressed)
    {
        <MudCardHeader Style="">
            <CardHeaderContent>
                <div class="d-flex align-center justify-center">
                    <MudText Class="mb-2 text-center" Style="font-size: 21px; width: fit-content">@Title</MudText>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="" @onmouseenter="@(() => _isEditButtonVisible = true)" @onmouseleave="@(() => _isEditButtonVisible = false)">
            <MudTextField @bind-Value="Content" Typo="Typo.h6" Variant="Variant.Outlined" Disabled="true" AutoGrow="true" />
            <div class="d-flex w-100 justify-content-between" style="position: absolute; margin-top: -10px; margin-left: -25px">
                <div class="d-flex align-items-center pl-3">
                    <MudToggleIconButton
                        Icon="@Icons.Material.Filled.ThumbUpAlt"
                        ToggledColor="Color.Primary"
                        ToggledChanged="OnToggle"/>
                    <MudText>@Card.Like</MudText>
                </div>
                <div class="d-flex justify-content-end">
                    <MudIconButton
                        Ripple="false"
                        hidden="@(!_isEditButtonVisible)"
                        Icon="@Icons.Material.Filled.Delete"
                        Size="Size.Small"
                        @onclick="@(() => RemoveCardAsync(Card))"
                        Style=@($"margin: 5px 5px; color: {Colors.Black}")/>
                    <MudIconButton
                        Ripple="false"
                        hidden="@(!_isEditButtonVisible)"
                        Icon="@Icons.Material.Filled.Edit"
                        Size="Size.Small"
                        @onclick="() => _isEditPressed = true"
                        Style=@($"margin: 5px 5px; color: {Colors.Black}")/>
                </div>
            </div>
        </MudCardContent>
        <MudExpansionPanel Text="Action items" Style="background-color: transparent">
            <div class="d-flex align-center pb-5">
                <MudTextField AutoGrow="true" @bind-Value="@_actionItemContent" TextAreaId="@_actionTextAreaId"/>
                <MudFab StartIcon="@Icons.Material.Rounded.Add" @onclick="CreateActionItem" Size="Size.Small" Class="ml-2"/>
            </div>
            @{ bool isFirst = true; }
            @foreach (var item in Card.ActionItems)
            {
                if (isFirst)
                {
                    <MudTextField AutoGrow="true" Value="@item.Content" Disabled="true" />
                    isFirst = false;
                    continue;
                }
                <MudDivider/>
                <MudTextField AutoGrow="true" Value="@item.Content" Disabled="true" />
            }
        </MudExpansionPanel>
    }
    else
    {
        <MudCardContent Class="" Style="">
            <MudTextField Label="Title" Variant="Variant.Filled" T="string" @bind-Value="Title" />
            <MudTextField Label="Content" Variant="Variant.Filled" AutoGrow="true" @bind-Value="@Content" />
            <div style="display:flex; flex-direction: row; justify-content: end; align-items: center; margin-bottom: 3px">
                <MudIconButton Ripple="false" Size="Size.Small" Icon="@Icons.Material.Filled.Close" Style=@($"color: {Colors.Black}") OnClick="Discard"/>
                <MudIconButton Ripple="false" Size="Size.Small" Icon="@Icons.Material.Filled.Check" Style=@($"color: {Colors.Black}") OnClick="SaveAsync"/>
            </div>
        </MudCardContent>
    }
</MudCard>